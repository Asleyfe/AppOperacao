/**
 * =====================================================
 * SERVI√áO DE AUTORIZA√á√ÉO OFFLINE
 * =====================================================
 * Data: 21 de agosto de 2025
 * Objetivo: Implementar regras de seguran√ßa RLS do PostgreSQL no SQLite offline
 * Uso: Controlar acesso a dados baseado em fun√ß√µes e hierarquia
 */

import { getLocalDatabase, safeGetFirstAsync, safeGetAllAsync } from './database';

// =====================================================
// INTERFACES DE AUTORIZA√á√ÉO
// =====================================================
export interface UserContext {
  matricula: number;
  funcao: string;
  nome: string;
  user_id?: string;
  supervisor_id?: number;
  coordenador_id?: number;
}

export interface AuthorizationResult {
  authorized: boolean;
  reason?: string;
  context?: any;
}

export interface PermissionCheck {
  canView: boolean;
  canEdit: boolean;
  canDelete: boolean;
  canCreate: boolean;
  restrictions?: string[];
}

// =====================================================
// ENUMS DE FUN√á√ïES E PERMISS√ïES
// =====================================================
export enum UserRole {
  ADMIN = 'Admin',
  COORDENADOR = 'Coordenador',
  SUPERVISOR = 'Supervisor',
  ENCARREGADO = 'Encarregado',
  ELETRICISTA = 'Eletricista',
  MOTORISTA = 'Motorista'
}

export enum Permission {
  VIEW_ALL_COLABORADORES = 'view_all_colaboradores',
  EDIT_ALL_COLABORADORES = 'edit_all_colaboradores',
  VIEW_OWN_TEAM_COLABORADORES = 'view_own_team_colaboradores',
  VIEW_ALL_EQUIPES = 'view_all_equipes',
  EDIT_ALL_EQUIPES = 'edit_all_equipes',
  VIEW_OWN_EQUIPES = 'view_own_equipes',
  EDIT_OWN_EQUIPES = 'edit_own_equipes',
  VIEW_ALL_SERVICOS = 'view_all_servicos',
  EDIT_ALL_SERVICOS = 'edit_all_servicos',
  VIEW_OWN_SERVICOS = 'view_own_servicos',
  EDIT_OWN_SERVICOS = 'edit_own_servicos'
}

// =====================================================
// CLASSE PRINCIPAL DE AUTORIZA√á√ÉO
// =====================================================
export class OfflineAuthorizationService {
  
  // =====================================================
  // CACHE DE CONTEXTO DO USU√ÅRIO
  // =====================================================
  private static userContextCache: Map<number, UserContext> = new Map();
  private static cacheExpiry: Map<number, number> = new Map();
  private static readonly CACHE_DURATION = 5 * 60 * 1000; // 5 minutos

  // =====================================================
  // OBTER CONTEXTO DO USU√ÅRIO
  // =====================================================
  
  /**
   * Obter contexto completo do usu√°rio
   */
  static async getUserContext(matricula: number): Promise<UserContext | null> {
    try {
      // Verificar cache
      const cached = this.userContextCache.get(matricula);
      const cacheTime = this.cacheExpiry.get(matricula);
      
      if (cached && cacheTime && Date.now() < cacheTime) {
        console.log('üìã [AUTH] Usando contexto do cache para matr√≠cula:', matricula);
        return cached;
      }

      console.log('üîç [AUTH] Buscando contexto do usu√°rio:', matricula);
      const db = await getLocalDatabase();
      
      const user = await safeGetFirstAsync(db, `
        SELECT 
          matricula,
          nome,
          funcao,
          user_id,
          supervisor_id,
          coordenador_id
        FROM colaboradores_local 
        WHERE matricula = ?
      `, [matricula]);

      if (!user) {
        console.log('‚ùå [AUTH] Usu√°rio n√£o encontrado:', matricula);
        return null;
      }

      const context: UserContext = {
        matricula: user.matricula,
        funcao: user.funcao,
        nome: user.nome,
        user_id: user.user_id,
        supervisor_id: user.supervisor_id,
        coordenador_id: user.coordenador_id
      };

      // Atualizar cache
      this.userContextCache.set(matricula, context);
      this.cacheExpiry.set(matricula, Date.now() + this.CACHE_DURATION);

      console.log('‚úÖ [AUTH] Contexto do usu√°rio obtido:', context);
      return context;
    } catch (error) {
      console.error('‚ùå [AUTH] Erro ao obter contexto do usu√°rio:', error);
      return null;
    }
  }

  /**
   * Limpar cache de contexto
   */
  static clearUserContextCache(matricula?: number): void {
    if (matricula) {
      this.userContextCache.delete(matricula);
      this.cacheExpiry.delete(matricula);
    } else {
      this.userContextCache.clear();
      this.cacheExpiry.clear();
    }
  }

  // =====================================================
  // VERIFICA√á√ïES DE FUN√á√ÉO
  // =====================================================
  
  /**
   * Verificar se usu√°rio √© admin
   */
  static async isAdmin(matricula: number): Promise<boolean> {
    const context = await this.getUserContext(matricula);
    return context?.funcao === UserRole.ADMIN;
  }

  /**
   * Verificar se usu√°rio √© coordenador
   */
  static async isCoordenador(matricula: number): Promise<boolean> {
    const context = await this.getUserContext(matricula);
    return context?.funcao === UserRole.COORDENADOR;
  }

  /**
   * Verificar se usu√°rio √© supervisor
   */
  static async isSupervisor(matricula: number): Promise<boolean> {
    const context = await this.getUserContext(matricula);
    return context?.funcao === UserRole.SUPERVISOR;
  }

  /**
   * Verificar se usu√°rio √© encarregado
   */
  static async isEncarregado(matricula: number): Promise<boolean> {
    const context = await this.getUserContext(matricula);
    if (context?.funcao === UserRole.ENCARREGADO) return true;
    
    // Verificar se tem equipes sob sua responsabilidade
    try {
      const db = await getLocalDatabase();
      const result = await safeGetFirstAsync(db, 
        'SELECT 1 FROM equipes_local WHERE encarregado_matricula = ?', 
        [matricula]
      );
      return !!result;
    } catch (error) {
      console.error('‚ùå [AUTH] Erro ao verificar se √© encarregado:', error);
      return false;
    }
  }

  /**
   * Verificar se usu√°rio tem fun√ß√£o administrativa
   */
  static async hasAdminRole(matricula: number): Promise<boolean> {
    const isAdm = await this.isAdmin(matricula);
    const isCoord = await this.isCoordenador(matricula);
    const isSuper = await this.isSupervisor(matricula);
    return isAdm || isCoord || isSuper;
  }

  // =====================================================
  // AUTORIZA√á√ÉO DE COLABORADORES
  // =====================================================
  
  /**
   * Verificar se pode ver colaborador espec√≠fico
   */
  static async canViewColaborador(userMatricula: number, colaboradorMatricula: number): Promise<AuthorizationResult> {
    try {
      console.log('üîê [AUTH] Verificando permiss√£o para ver colaborador:', { userMatricula, colaboradorMatricula });
      
      // Admin, coordenador e supervisor podem ver todos
      if (await this.hasAdminRole(userMatricula)) {
        return { authorized: true, reason: 'Usu√°rio tem fun√ß√£o administrativa' };
      }

      // Pode ver a si mesmo
      if (userMatricula === colaboradorMatricula) {
        return { authorized: true, reason: 'Visualizando pr√≥prio perfil' };
      }

      // Encarregado pode ver colaboradores de suas equipes
      if (await this.isEncarregado(userMatricula)) {
        const canView = await this.isColaboradorInUserTeams(userMatricula, colaboradorMatricula);
        if (canView) {
          return { authorized: true, reason: 'Colaborador est√° em equipe do encarregado' };
        }
      }

      return { authorized: false, reason: 'Sem permiss√£o para ver este colaborador' };
    } catch (error) {
      console.error('‚ùå [AUTH] Erro na verifica√ß√£o de permiss√£o:', error);
      return { authorized: false, reason: 'Erro interno na verifica√ß√£o' };
    }
  }

  /**
   * Verificar se pode editar colaborador espec√≠fico
   */
  static async canEditColaborador(userMatricula: number, colaboradorMatricula: number): Promise<AuthorizationResult> {
    try {
      // Admin e coordenador podem editar todos
      if (await this.isAdmin(userMatricula) || await this.isCoordenador(userMatricula)) {
        return { authorized: true, reason: 'Usu√°rio tem permiss√£o administrativa' };
      }

      // Supervisor pode editar colaboradores sob sua supervis√£o
      if (await this.isSupervisor(userMatricula)) {
        const isSupervised = await this.isColaboradorSupervised(userMatricula, colaboradorMatricula);
        if (isSupervised) {
          return { authorized: true, reason: 'Colaborador est√° sob supervis√£o do usu√°rio' };
        }
      }

      // Pode editar a si mesmo (dados limitados)
      if (userMatricula === colaboradorMatricula) {
        return { 
          authorized: true, 
          reason: 'Editando pr√≥prio perfil',
          context: { limitedEdit: true }
        };
      }

      return { authorized: false, reason: 'Sem permiss√£o para editar este colaborador' };
    } catch (error) {
      console.error('‚ùå [AUTH] Erro na verifica√ß√£o de permiss√£o de edi√ß√£o:', error);
      return { authorized: false, reason: 'Erro interno na verifica√ß√£o' };
    }
  }

  /**
   * Obter colaboradores que o usu√°rio pode ver
   */
  static async getViewableColaboradores(userMatricula: number): Promise<any[]> {
    try {
      const db = await getLocalDatabase();
      
      // Admin, coordenador e supervisor veem todos
      if (await this.hasAdminRole(userMatricula)) {
        return await safeGetAllAsync(db, 'SELECT * FROM colaboradores_local ORDER BY nome');
      }

      // Encarregado v√™ colaboradores de suas equipes + ele mesmo
      if (await this.isEncarregado(userMatricula)) {
        return await safeGetAllAsync(db, `
          SELECT DISTINCT c.* FROM colaboradores_local c
          WHERE c.matricula = ? -- Ele mesmo
          OR c.matricula IN (
            SELECT DISTINCT ce.colaborador_matricula 
            FROM composicao_equipe_local ce
            JOIN equipes_local e ON ce.equipe_id = e.id
            WHERE e.encarregado_matricula = ?
          )
          ORDER BY c.nome
        `, [userMatricula, userMatricula]);
      }

      // Outros usu√°rios veem apenas a si mesmos
      return await safeGetAllAsync(db, 
        'SELECT * FROM colaboradores_local WHERE matricula = ?', 
        [userMatricula]
      );
    } catch (error) {
      console.error('‚ùå [AUTH] Erro ao obter colaboradores vis√≠veis:', error);
      return [];
    }
  }

  // =====================================================
  // AUTORIZA√á√ÉO DE EQUIPES
  // =====================================================
  
  /**
   * Verificar se pode ver equipe espec√≠fica
   */
  static async canViewEquipe(userMatricula: number, equipeId: number): Promise<AuthorizationResult> {
    try {
      // Admin, coordenador e supervisor podem ver todas
      if (await this.hasAdminRole(userMatricula)) {
        return { authorized: true, reason: 'Usu√°rio tem fun√ß√£o administrativa' };
      }

      // Encarregado pode ver suas pr√≥prias equipes
      const db = await getLocalDatabase();
      const equipe = await safeGetFirstAsync(db, 
        'SELECT encarregado_matricula FROM equipes_local WHERE id = ?', 
        [equipeId]
      );

      if (equipe && equipe.encarregado_matricula === userMatricula) {
        return { authorized: true, reason: 'Usu√°rio √© encarregado da equipe' };
      }

      // Colaborador pode ver equipes das quais faz parte
      const participacao = await safeGetFirstAsync(db, `
        SELECT 1 FROM composicao_equipe_local ce
        JOIN equipes_local e ON ce.equipe_id = e.id
        WHERE e.id = ? AND ce.colaborador_matricula = ?
      `, [equipeId, userMatricula]);

      if (participacao) {
        return { authorized: true, reason: 'Usu√°rio faz parte da equipe' };
      }

      return { authorized: false, reason: 'Sem permiss√£o para ver esta equipe' };
    } catch (error) {
      console.error('‚ùå [AUTH] Erro na verifica√ß√£o de permiss√£o de equipe:', error);
      return { authorized: false, reason: 'Erro interno na verifica√ß√£o' };
    }
  }

  /**
   * Verificar se pode editar equipe espec√≠fica
   */
  static async canEditEquipe(userMatricula: number, equipeId: number): Promise<AuthorizationResult> {
    try {
      // Admin e coordenador podem editar todas
      if (await this.isAdmin(userMatricula) || await this.isCoordenador(userMatricula)) {
        return { authorized: true, reason: 'Usu√°rio tem permiss√£o administrativa' };
      }

      // Encarregado pode editar suas pr√≥prias equipes
      const db = await getLocalDatabase();
      const equipe = await safeGetFirstAsync(db, 
        'SELECT encarregado_matricula FROM equipes_local WHERE id = ?', 
        [equipeId]
      );

      if (equipe && equipe.encarregado_matricula === userMatricula) {
        return { authorized: true, reason: 'Usu√°rio √© encarregado da equipe' };
      }

      return { authorized: false, reason: 'Sem permiss√£o para editar esta equipe' };
    } catch (error) {
      console.error('‚ùå [AUTH] Erro na verifica√ß√£o de permiss√£o de edi√ß√£o de equipe:', error);
      return { authorized: false, reason: 'Erro interno na verifica√ß√£o' };
    }
  }

  /**
   * Obter equipes que o usu√°rio pode ver
   */
  static async getViewableEquipes(userMatricula: number, data?: string): Promise<any[]> {
    try {
      const db = await getLocalDatabase();
      let query = 'SELECT * FROM equipes_local';
      let params: any[] = [];
      
      // Admin, coordenador e supervisor veem todas
      if (await this.hasAdminRole(userMatricula)) {
        if (data) {
          query += ' WHERE data = ?';
          params.push(data);
        }
        query += ' ORDER BY prefixo';
        return await safeGetAllAsync(db, query, params);
      }

      // Encarregado v√™ suas equipes + equipes onde participa
      query = `
        SELECT DISTINCT e.* FROM equipes_local e
        WHERE e.encarregado_matricula = ? -- Suas equipes
        OR e.id IN (
          SELECT ce.equipe_id FROM composicao_equipe_local ce
          WHERE ce.colaborador_matricula = ? -- Equipes onde participa
        )
      `;
      params = [userMatricula, userMatricula];
      
      if (data) {
        query += ' AND e.data = ?';
        params.push(data);
      }
      
      query += ' ORDER BY e.prefixo';
      return await safeGetAllAsync(db, query, params);
    } catch (error) {
      console.error('‚ùå [AUTH] Erro ao obter equipes vis√≠veis:', error);
      return [];
    }
  }

  // =====================================================
  // AUTORIZA√á√ÉO DE SERVI√áOS
  // =====================================================
  
  /**
   * Verificar se pode ver servi√ßo espec√≠fico
   */
  static async canViewServico(userMatricula: number, servicoId: string): Promise<AuthorizationResult> {
    try {
      // Admin, coordenador e supervisor podem ver todos
      if (await this.hasAdminRole(userMatricula)) {
        return { authorized: true, reason: 'Usu√°rio tem fun√ß√£o administrativa' };
      }

      // Verificar se o servi√ßo pertence a uma equipe do usu√°rio
      const db = await getLocalDatabase();
      const servico = await safeGetFirstAsync(db, `
        SELECT s.*, e.encarregado_matricula FROM servicos_local s
        JOIN equipes_local e ON s.equipe_id = e.id
        WHERE s.id = ?
      `, [servicoId]);

      if (!servico) {
        return { authorized: false, reason: 'Servi√ßo n√£o encontrado' };
      }

      // Encarregado pode ver servi√ßos de suas equipes
      if (servico.encarregado_matricula === userMatricula) {
        return { authorized: true, reason: 'Usu√°rio √© encarregado da equipe do servi√ßo' };
      }

      // Colaborador pode ver servi√ßos de equipes onde participa
      const participacao = await safeGetFirstAsync(db, `
        SELECT 1 FROM composicao_equipe_local ce
        WHERE ce.equipe_id = ? AND ce.colaborador_matricula = ?
      `, [servico.equipe_id, userMatricula]);

      if (participacao) {
        return { authorized: true, reason: 'Usu√°rio participa da equipe do servi√ßo' };
      }

      return { authorized: false, reason: 'Sem permiss√£o para ver este servi√ßo' };
    } catch (error) {
      console.error('‚ùå [AUTH] Erro na verifica√ß√£o de permiss√£o de servi√ßo:', error);
      return { authorized: false, reason: 'Erro interno na verifica√ß√£o' };
    }
  }

  /**
   * Verificar se pode editar servi√ßo espec√≠fico
   */
  static async canEditServico(userMatricula: number, servicoId: string): Promise<AuthorizationResult> {
    try {
      // Admin e coordenador podem editar todos
      if (await this.isAdmin(userMatricula) || await this.isCoordenador(userMatricula)) {
        return { authorized: true, reason: 'Usu√°rio tem permiss√£o administrativa' };
      }

      // Verificar se o servi√ßo pertence a uma equipe do usu√°rio
      const db = await getLocalDatabase();
      const servico = await safeGetFirstAsync(db, `
        SELECT s.*, e.encarregado_matricula FROM servicos_local s
        JOIN equipes_local e ON s.equipe_id = e.id
        WHERE s.id = ?
      `, [servicoId]);

      if (!servico) {
        return { authorized: false, reason: 'Servi√ßo n√£o encontrado' };
      }

      // Encarregado pode editar servi√ßos de suas equipes
      if (servico.encarregado_matricula === userMatricula) {
        return { authorized: true, reason: 'Usu√°rio √© encarregado da equipe do servi√ßo' };
      }

      return { authorized: false, reason: 'Sem permiss√£o para editar este servi√ßo' };
    } catch (error) {
      console.error('‚ùå [AUTH] Erro na verifica√ß√£o de permiss√£o de edi√ß√£o de servi√ßo:', error);
      return { authorized: false, reason: 'Erro interno na verifica√ß√£o' };
    }
  }

  /**
   * Obter servi√ßos que o usu√°rio pode ver
   */
  static async getViewableServicos(userMatricula: number, data?: string): Promise<any[]> {
    try {
      const db = await getLocalDatabase();
      let query = 'SELECT s.* FROM servicos_local s JOIN equipes_local e ON s.equipe_id = e.id';
      let params: any[] = [];
      
      // Admin, coordenador e supervisor veem todos
      if (await this.hasAdminRole(userMatricula)) {
        if (data) {
          query += ' WHERE s.data_planejada = ?';
          params.push(data);
        }
        query += ' ORDER BY s.data_planejada, e.prefixo';
        return await safeGetAllAsync(db, query, params);
      }

      // Encarregado e colaboradores veem servi√ßos de suas equipes
      query += `
        WHERE e.encarregado_matricula = ? -- Equipes do encarregado
        OR e.id IN (
          SELECT ce.equipe_id FROM composicao_equipe_local ce
          WHERE ce.colaborador_matricula = ? -- Equipes onde participa
        )
      `;
      params = [userMatricula, userMatricula];
      
      if (data) {
        query += ' AND s.data_planejada = ?';
        params.push(data);
      }
      
      query += ' ORDER BY s.data_planejada, e.prefixo';
      return await safeGetAllAsync(db, query, params);
    } catch (error) {
      console.error('‚ùå [AUTH] Erro ao obter servi√ßos vis√≠veis:', error);
      return [];
    }
  }

  // =====================================================
  // FUN√á√ïES AUXILIARES
  // =====================================================
  
  /**
   * Verificar se colaborador est√° em equipes do usu√°rio
   */
  private static async isColaboradorInUserTeams(userMatricula: number, colaboradorMatricula: number): Promise<boolean> {
    try {
      const db = await getLocalDatabase();
      const result = await safeGetFirstAsync(db, `
        SELECT 1 FROM composicao_equipe_local ce
        JOIN equipes_local e ON ce.equipe_id = e.id
        WHERE e.encarregado_matricula = ? AND ce.colaborador_matricula = ?
      `, [userMatricula, colaboradorMatricula]);
      
      return !!result;
    } catch (error) {
      console.error('‚ùå [AUTH] Erro ao verificar colaborador em equipes:', error);
      return false;
    }
  }

  /**
   * Verificar se colaborador est√° sob supervis√£o do usu√°rio
   */
  private static async isColaboradorSupervised(supervisorMatricula: number, colaboradorMatricula: number): Promise<boolean> {
    try {
      const db = await getLocalDatabase();
      const result = await safeGetFirstAsync(db, 
        'SELECT 1 FROM colaboradores_local WHERE matricula = ? AND supervisor_id = ?', 
        [colaboradorMatricula, supervisorMatricula]
      );
      
      return !!result;
    } catch (error) {
      console.error('‚ùå [AUTH] Erro ao verificar supervis√£o:', error);
      return false;
    }
  }

  /**
   * Obter permiss√µes completas do usu√°rio
   */
  static async getUserPermissions(matricula: number): Promise<PermissionCheck> {
    const isAdm = await this.isAdmin(matricula);
    const isCoord = await this.isCoordenador(matricula);
    const isSuper = await this.isSupervisor(matricula);
    const isEnc = await this.isEncarregado(matricula);

    // Admin tem todas as permiss√µes
    if (isAdm) {
      return {
        canView: true,
        canEdit: true,
        canDelete: true,
        canCreate: true
      };
    }

    // Coordenador tem quase todas as permiss√µes
    if (isCoord) {
      return {
        canView: true,
        canEdit: true,
        canDelete: false, // N√£o pode deletar
        canCreate: true
      };
    }

    // Supervisor tem permiss√µes limitadas
    if (isSuper) {
      return {
        canView: true,
        canEdit: true,
        canDelete: false,
        canCreate: false,
        restrictions: ['Apenas colaboradores supervisionados']
      };
    }

    // Encarregado tem permiss√µes de suas equipes
    if (isEnc) {
      return {
        canView: true,
        canEdit: true,
        canDelete: false,
        canCreate: false,
        restrictions: ['Apenas suas equipes e colaboradores']
      };
    }

    // Outros usu√°rios t√™m permiss√µes m√≠nimas
    return {
      canView: true,
      canEdit: false,
      canDelete: false,
      canCreate: false,
      restrictions: ['Apenas pr√≥prios dados']
    };
  }

  // =====================================================
  // UTILIT√ÅRIOS DE DEBUG
  // =====================================================
  
  /**
   * Obter informa√ß√µes de debug sobre autoriza√ß√£o
   */
  static async getAuthDebugInfo(matricula: number): Promise<any> {
    const context = await this.getUserContext(matricula);
    const permissions = await this.getUserPermissions(matricula);
    
    return {
      context,
      permissions,
      roles: {
        isAdmin: await this.isAdmin(matricula),
        isCoordenador: await this.isCoordenador(matricula),
        isSupervisor: await this.isSupervisor(matricula),
        isEncarregado: await this.isEncarregado(matricula)
      },
      cacheInfo: {
        cached: this.userContextCache.has(matricula),
        cacheExpiry: this.cacheExpiry.get(matricula)
      }
    };
  }
}

// =====================================================
// EXPORTA√á√ïES PARA FACILITAR USO
// =====================================================
export const canViewColaborador = OfflineAuthorizationService.canViewColaborador.bind(OfflineAuthorizationService);
export const canEditColaborador = OfflineAuthorizationService.canEditColaborador.bind(OfflineAuthorizationService);
export const canViewEquipe = OfflineAuthorizationService.canViewEquipe.bind(OfflineAuthorizationService);
export const canEditEquipe = OfflineAuthorizationService.canEditEquipe.bind(OfflineAuthorizationService);
export const canViewServico = OfflineAuthorizationService.canViewServico.bind(OfflineAuthorizationService);
export const canEditServico = OfflineAuthorizationService.canEditServico.bind(OfflineAuthorizationService);
export const getUserContext = OfflineAuthorizationService.getUserContext.bind(OfflineAuthorizationService);
export const getUserPermissions = OfflineAuthorizationService.getUserPermissions.bind(OfflineAuthorizationService);

/**
 * =====================================================
 * EXEMPLO DE USO:
 * =====================================================
 * 
 * import { OfflineAuthorizationService, canEditServico } from './OfflineAuthorizationService';
 * 
 * // Verificar se pode editar servi√ßo
 * const result = await canEditServico(12345, 'servico-123');
 * if (!result.authorized) {
 *   console.error('Acesso negado:', result.reason);
 *   return;
 * }
 * 
 * // Obter servi√ßos vis√≠veis para o usu√°rio
 * const servicos = await OfflineAuthorizationService.getViewableServicos(12345, '2025-08-21');
 * 
 * // Obter permiss√µes do usu√°rio
 * const permissions = await getUserPermissions(12345);
 * console.log('Permiss√µes:', permissions);
 * =====================================================
 */