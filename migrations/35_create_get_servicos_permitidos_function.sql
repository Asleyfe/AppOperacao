-- =====================================================
-- MIGRA√á√ÉO 35: CRIAR FUN√á√ÉO get_servicos_permitidos
-- =====================================================
-- Esta fun√ß√£o RPC substitui a view vw_servicos_com_hierarquia
-- e aplica as pol√≠ticas RLS diretamente na fun√ß√£o

-- =====================================================
-- 1. CRIAR FUN√á√ÉO get_servicos_permitidos
-- =====================================================

CREATE OR REPLACE FUNCTION public.get_servicos_permitidos()
RETURNS TABLE(
    id INTEGER,
    equipe_id INTEGER,
    data_planejada DATE,
    descricao TEXT,
    status TEXT,
    inicio_deslocamento TIMESTAMP WITH TIME ZONE,
    fim_deslocamento TIMESTAMP WITH TIME ZONE,
    inicio_execucao TIMESTAMP WITH TIME ZONE,
    fim_execucao TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE,
    updated_at TIMESTAMP WITH TIME ZONE,
    equipe_prefixo VARCHAR(10),
    nota VARCHAR(50),
    encarregado_id INTEGER,
    encarregado_nome TEXT,
    encarregado_funcao TEXT,
    supervisor_id INTEGER,
    supervisor_nome TEXT,
    coordenador_id INTEGER,
    coordenador_nome TEXT
) AS $$
BEGIN
    -- Verificar se o usu√°rio est√° autenticado
    IF auth.uid() IS NULL THEN
        RAISE EXCEPTION 'Usu√°rio n√£o autenticado';
    END IF;

    -- Retornar servi√ßos baseado no perfil do usu√°rio
    RETURN QUERY
    SELECT 
        s.id,
        s.equipe_id,
        s.data_planejada,
        s.descricao,
        s.status,
        s.inicio_deslocamento,
        s.fim_deslocamento,
        s.inicio_execucao,
        s.fim_execucao,
        s.created_at,
        s.updated_at,
        s.equipe_prefixo,
        s.nota,
        c_enc.matricula AS encarregado_id,
        c_enc.nome AS encarregado_nome,
        c_enc.funcao AS encarregado_funcao,
        c_sup.matricula AS supervisor_id,
        c_sup.nome AS supervisor_nome,
        c_coord.matricula AS coordenador_id,
        c_coord.nome AS coordenador_nome
    FROM servicos s
    LEFT JOIN equipes e ON s.equipe_id = e.id
    LEFT JOIN colaboradores c_enc ON e.encarregado_matricula = c_enc.matricula
    LEFT JOIN colaboradores c_sup ON c_enc.supervisor_id = c_sup.id
    LEFT JOIN colaboradores c_coord ON c_enc.coordenador_id = c_coord.id
    WHERE (
        -- Admins e supervisores podem ver todos os servi√ßos
        public.is_admin() OR public.is_supervisor()
        OR
        -- Encarregados podem ver apenas servi√ßos de suas equipes
        (
            public.is_encarregado() AND 
            public.is_encarregado_da_equipe(s.equipe_id)
        )
    )
    ORDER BY s.data_planejada DESC, s.created_at DESC;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- =====================================================
-- 2. CONCEDER PERMISS√ïES
-- =====================================================

-- Permitir que usu√°rios autenticados executem a fun√ß√£o
GRANT EXECUTE ON FUNCTION public.get_servicos_permitidos() TO authenticated;

-- =====================================================
-- 3. COMENT√ÅRIOS E DOCUMENTA√á√ÉO
-- =====================================================

COMMENT ON FUNCTION public.get_servicos_permitidos() IS 'Fun√ß√£o RPC que retorna servi√ßos permitidos baseado no perfil do usu√°rio logado. Substitui a view vw_servicos_com_hierarquia aplicando RLS diretamente.';

-- =====================================================
-- 4. TESTES DE VERIFICA√á√ÉO
-- =====================================================

DO $$
BEGIN
    -- Verificar se a fun√ß√£o foi criada
    IF EXISTS (
        SELECT 1 FROM pg_proc 
        WHERE proname = 'get_servicos_permitidos' 
        AND pronamespace = (SELECT oid FROM pg_namespace WHERE nspname = 'public')
    ) THEN
        RAISE NOTICE '‚úÖ Fun√ß√£o get_servicos_permitidos criada com sucesso';
    ELSE
        RAISE NOTICE '‚ùå Erro: Fun√ß√£o get_servicos_permitidos n√£o foi criada';
    END IF;
END $$;

-- =====================================================
-- 5. INSTRU√á√ïES DE TESTE
-- =====================================================

/*
PARA TESTAR A FUN√á√ÉO:

1. Como Admin/Supervisor:
   SELECT COUNT(*) FROM get_servicos_permitidos();
   
2. Como Encarregado:
   SELECT COUNT(*) FROM get_servicos_permitidos();
   
3. Verificar estrutura de retorno:
   SELECT * FROM get_servicos_permitidos() LIMIT 1;

A fun√ß√£o deve retornar:
- Todos os servi√ßos para Admins e Supervisores
- Apenas servi√ßos das equipes do encarregado para Encarregados
- Erro de autentica√ß√£o para usu√°rios n√£o logados
*/

-- =====================================================
-- 6. LOG DE MIGRA√á√ÉO
-- =====================================================

RAISE NOTICE 'üöÄ MIGRA√á√ÉO 35 CONCLU√çDA:';
RAISE NOTICE '   ‚úÖ Fun√ß√£o get_servicos_permitidos criada';
RAISE NOTICE '   ‚úÖ Permiss√µes configuradas';
RAISE NOTICE '   ‚úÖ RLS aplicado na fun√ß√£o';
RAISE NOTICE '';
RAISE NOTICE 'üìã PR√ìXIMOS PASSOS:';
RAISE NOTICE '   1. Testar a fun√ß√£o com diferentes perfis';
RAISE NOTICE '   2. Verificar se o frontend funciona corretamente';
RAISE NOTICE '   3. Monitorar logs de erro';
RAISE NOTICE '';
RAISE NOTICE 'üîß COMANDOS DE TESTE:';
RAISE NOTICE '   SELECT COUNT(*) FROM get_servicos_permitidos();';
RAISE NOTICE '   SELECT * FROM get_servicos_permitidos() LIMIT 3;';